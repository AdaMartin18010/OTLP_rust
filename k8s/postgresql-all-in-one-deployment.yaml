# PostgreSQL All-in-One Kubernetes 部署配置
apiVersion: v1
kind: Namespace
metadata:
  name: postgresql-all-in-one
  labels:
    name: postgresql-all-in-one
    app: postgresql-all-in-one

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-config
  namespace: postgresql-all-in-one
data:
  postgresql.conf: |
    # PostgreSQL 核心配置优化
    shared_buffers = 2GB
    effective_cache_size = 6GB
    work_mem = 256MB
    maintenance_work_mem = 1GB
    max_connections = 200
    random_page_cost = 1.1
    effective_io_concurrency = 200
    max_parallel_workers_per_gather = 4
    max_parallel_workers = 8
    wal_level = replica
    max_wal_senders = 3
    max_replication_slots = 3
    hot_standby = on
    hot_standby_feedback = on
    log_statement = 'all'
    log_min_duration_statement = 1000
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    checkpoint_completion_target = 0.9
    max_wal_size = 4GB
    min_wal_size = 1GB

---
apiVersion: v1
kind: Secret
metadata:
  name: postgresql-secret
  namespace: postgresql-all-in-one
type: Opaque
data:
  postgres-password: cG9zdGdyZXM=  # base64 encoded 'postgres'
  replication-password: cmVwbGljYXRpb24=  # base64 encoded 'replication'

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql-service
  namespace: postgresql-all-in-one
  labels:
    app: postgresql
spec:
  selector:
    app: postgresql
  ports:
  - port: 5432
    targetPort: 5432
    name: postgresql
  type: ClusterIP

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql-all-in-one
  namespace: postgresql-all-in-one
spec:
  serviceName: postgresql-service
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      containers:
      - name: postgresql
        image: timescale/timescaledb:latest-pg15
        ports:
        - containerPort: 5432
          name: postgresql
        env:
        - name: POSTGRES_DB
          value: "myapp"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
        - name: postgresql-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        resources:
          requests:
            memory: "4Gi"
            cpu: "2"
          limits:
            memory: "8Gi"
            cpu: "4"
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - exec pg_isready -U postgres -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - exec pg_isready -U postgres -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: postgresql-config
        configMap:
          name: postgresql-config
  volumeClaimTemplates:
  - metadata:
      name: postgresql-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 100Gi
      storageClassName: "fast-ssd"

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: postgresql-all-in-one
  labels:
    app: redis
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: postgresql-all-in-one
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --maxmemory
        - 1gb
        - --maxmemory-policy
        - allkeys-lru
        resources:
          requests:
            memory: "1Gi"
            cpu: "0.5"
          limits:
            memory: "2Gi"
            cpu: "1"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: postgresql-all-in-one
  labels:
    app: prometheus
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
    name: prometheus
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: postgresql-all-in-one
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/prometheus.yml
          subPath: prometheus.yml
        - name: prometheus-data
          mountPath: /prometheus
        command:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=200h'
        - '--web.enable-lifecycle'
        resources:
          requests:
            memory: "1Gi"
            cpu: "0.5"
          limits:
            memory: "2Gi"
            cpu: "1"
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-data
        emptyDir: {}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: postgresql-all-in-one
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    scrape_configs:
      - job_name: 'postgresql'
        static_configs:
          - targets: ['postgresql-service:5432']
        metrics_path: /metrics
        scrape_interval: 5s

      - job_name: 'redis'
        static_configs:
          - targets: ['redis-service:6379']
        metrics_path: /metrics
        scrape_interval: 5s

      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: postgresql-all-in-one
  labels:
    app: grafana
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
    name: grafana
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: postgresql-all-in-one
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin"
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        - name: grafana-dashboard
          mountPath: /var/lib/grafana/dashboards/postgresql-dashboard.json
          subPath: postgresql-dashboard.json
        resources:
          requests:
            memory: "512Mi"
            cpu: "0.25"
          limits:
            memory: "1Gi"
            cpu: "0.5"
      volumes:
      - name: grafana-data
        emptyDir: {}
      - name: grafana-dashboard
        configMap:
          name: grafana-dashboard

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard
  namespace: postgresql-all-in-one
data:
  postgresql-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "PostgreSQL All-in-One Dashboard",
        "tags": ["postgresql", "database", "all-in-one"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Database Connections",
            "type": "graph",
            "targets": [
              {
                "expr": "postgresql_stat_database_numbackends",
                "legendFormat": "Active Connections"
              }
            ],
            "yAxes": [
              {
                "label": "Connections",
                "min": 0
              }
            ]
          },
          {
            "id": 2,
            "title": "Query Performance",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(postgresql_stat_database_tup_returned[5m])",
                "legendFormat": "Tuples Returned/sec"
              },
              {
                "expr": "rate(postgresql_stat_database_tup_fetched[5m])",
                "legendFormat": "Tuples Fetched/sec"
              }
            ]
          },
          {
            "id": 3,
            "title": "Cache Hit Ratio",
            "type": "singlestat",
            "targets": [
              {
                "expr": "rate(postgresql_stat_database_blks_hit[5m]) / (rate(postgresql_stat_database_blks_hit[5m]) + rate(postgresql_stat_database_blks_read[5m])) * 100",
                "legendFormat": "Cache Hit Ratio %"
              }
            ],
            "thresholds": "80,90"
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "5s"
      }
    }

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: postgresql-all-in-one-ingress
  namespace: postgresql-all-in-one
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: postgresql-all-in-one.local
    http:
      paths:
      - path: /grafana
        pathType: Prefix
        backend:
          service:
            name: grafana-service
            port:
              number: 3000
      - path: /prometheus
        pathType: Prefix
        backend:
          service:
            name: prometheus-service
            port:
              number: 9090
