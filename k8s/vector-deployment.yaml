apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vector
  namespace: postgresql-all-in-one
  labels:
    app: vector
    component: data-pipeline
spec:
  serviceName: vector
  replicas: 3
  selector:
    matchLabels:
      app: vector
  template:
    metadata:
      labels:
        app: vector
        component: data-pipeline
    spec:
      containers:
      - name: vector
        image: timberio/vector:0.34.0-alpine
        ports:
        - containerPort: 8686
          name: api
        - containerPort: 9598
          name: metrics
        - containerPort: 9000
          name: http
        env:
        - name: VECTOR_CONFIG
          value: "/etc/vector/vector.toml"
        - name: VECTOR_LOG
          value: "info"
        - name: VECTOR_LOG_FORMAT
          value: "json"
        volumeMounts:
        - name: vector-config
          mountPath: /etc/vector
        - name: vector-data
          mountPath: /var/lib/vector
        - name: app-logs
          mountPath: /var/log/app
        - name: system-logs
          mountPath: /var/log/system
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8686
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8686
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: vector-config
        configMap:
          name: vector-config
      - name: app-logs
        hostPath:
          path: /var/log/app
          type: DirectoryOrCreate
      - name: system-logs
        hostPath:
          path: /var/log/system
          type: DirectoryOrCreate
  volumeClaimTemplates:
  - metadata:
      name: vector-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
      storageClassName: "fast-ssd"
---
apiVersion: v1
kind: Service
metadata:
  name: vector
  namespace: postgresql-all-in-one
  labels:
    app: vector
    component: data-pipeline
spec:
  selector:
    app: vector
  ports:
  - name: api
    port: 8686
    targetPort: 8686
    protocol: TCP
  - name: metrics
    port: 9598
    targetPort: 9598
    protocol: TCP
  - name: http
    port: 9000
    targetPort: 9000
    protocol: TCP
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vector-config
  namespace: postgresql-all-in-one
  labels:
    app: vector
    component: data-pipeline
data:
  vector.toml: |
    data_dir = "/var/lib/vector"
    
    [log]
    level = "info"
    file = "/var/log/vector/vector.log"
    
    [api]
    enabled = true
    address = "0.0.0.0:8686"
    playground = true
    
    # 数据源配置
    [sources.app_logs]
    type = "file"
    include = ["/var/log/app/*.log"]
    read_from = "beginning"
    multiline.start_pattern = '^\d{4}-\d{2}-\d{2}'
    multiline.mode = "halt_before"
    multiline.condition_pattern = '^\d{4}-\d{2}-\d{2}'
    multiline.timeout_ms = 1000
    
    [sources.system_metrics]
    type = "host_metrics"
    collectors = ["cpu", "disk", "filesystem", "load", "memory", "network", "process"]
    
    [sources.business_events]
    type = "http"
    address = "0.0.0.0:9000"
    decoding.codec = "json"
    
    # 数据转换配置
    [transforms.log_parser]
    type = "remap"
    inputs = ["app_logs"]
    source = '''
    . = parse_json!(.message)
    .timestamp = parse_timestamp!(.timestamp, "%Y-%m-%d %H:%M:%S")
    .level = .level || "INFO"
    .service = .service || "unknown"
    .host = get_hostname!()
    '''
    
    [transforms.metrics_processor]
    type = "remap"
    inputs = ["system_metrics"]
    source = '''
    .timestamp = now()
    .host = get_hostname!()
    .metric_type = "system"
    '''
    
    [transforms.event_enricher]
    type = "remap"
    inputs = ["business_events"]
    source = '''
    .timestamp = now()
    .event_id = uuid_v4()
    .processed_at = now()
    .host = get_hostname!()
    '''
    
    # 数据路由配置
    [transforms.log_router]
    type = "route"
    inputs = ["log_parser"]
    route.error = '.level == "ERROR"'
    route.warning = '.level == "WARN"'
    route.info = '.level == "INFO"'
    
    [transforms.metrics_router]
    type = "route"
    inputs = ["metrics_processor"]
    route.cpu = '.name == "cpu"'
    route.memory = '.name == "memory"'
    route.disk = '.name == "disk"'
    route.network = '.name == "network"'
    
    # 数据输出配置
    [sinks.postgresql_logs]
    type = "postgresql"
    inputs = ["log_router.error", "log_router.warning", "log_router.info"]
    host = "postgresql-all-in-one"
    port = 5432
    database = "allinone"
    table = "application_logs"
    username = "postgres"
    password = "postgres123"
    batch.max_bytes = 1048576
    batch.timeout_secs = 5
    batch.max_events = 1000
    
    [sinks.postgresql_metrics]
    type = "postgresql"
    inputs = ["metrics_router.cpu", "metrics_router.memory", "metrics_router.disk", "metrics_router.network"]
    host = "postgresql-all-in-one"
    port = 5432
    database = "allinone"
    table = "system_metrics"
    username = "postgres"
    password = "postgres123"
    batch.max_bytes = 1048576
    batch.timeout_secs = 5
    batch.max_events = 1000
    
    [sinks.redis_cache]
    type = "redis"
    inputs = ["event_enricher"]
    key = "events:{{ .event_id }}"
    data_type = "list"
    redis_url = "redis://redis:6379"
    batch.max_bytes = 1048576
    batch.timeout_secs = 1
    batch.max_events = 100
    
    [sinks.prometheus_metrics]
    type = "prometheus"
    inputs = ["metrics_processor"]
    address = "0.0.0.0:9598"
    default_namespace = "vector"
    buckets = [0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1.0, 2.5, 5.0, 10.0]
---
apiVersion: v1
kind: ServiceMonitor
metadata:
  name: vector
  namespace: postgresql-all-in-one
  labels:
    app: vector
    component: data-pipeline
spec:
  selector:
    matchLabels:
      app: vector
  endpoints:
  - port: metrics
    interval: 15s
    path: /metrics
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: vector
  namespace: postgresql-all-in-one
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: vector
