# 代码示例持续集成测试
#
# 功能:
# 1. 自动测试所有文档中的代码示例
# 2. 验证代码的正确性和可运行性
# 3. 检查依赖版本兼容性
# 4. 生成测试报告

name: Code Examples CI

on:
  # PR触发
  pull_request:
    paths:
      - '**/*.md'
      - 'examples/**'
      - '.github/workflows/code-examples-ci.yml'
  
  # 每周执行一次完整测试
  schedule:
    - cron: '0 2 * * 1'  # 每周一 UTC 02:00
  
  # 手动触发
  workflow_dispatch:
    inputs:
      language:
        description: '指定测试语言 (all/go/java/python/node)'
        required: false
        default: 'all'

jobs:
  # 提取文档中的代码示例
  extract-examples:
    runs-on: ubuntu-latest
    outputs:
      has-go: ${{ steps.detect.outputs.has-go }}
      has-java: ${{ steps.detect.outputs.has-java }}
      has-python: ${{ steps.detect.outputs.has-python }}
      has-node: ${{ steps.detect.outputs.has-node }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Extract Code Blocks
      run: |
        python3 << 'EOF'
        import re
        import os
        from pathlib import Path
        
        # 创建输出目录
        Path('extracted-examples/go').mkdir(parents=True, exist_ok=True)
        Path('extracted-examples/java').mkdir(parents=True, exist_ok=True)
        Path('extracted-examples/python').mkdir(parents=True, exist_ok=True)
        Path('extracted-examples/node').mkdir(parents=True, exist_ok=True)
        
        # 语言到目录的映射
        lang_dirs = {
            'go': 'go',
            'java': 'java',
            'python': 'python',
            'javascript': 'node',
            'typescript': 'node'
        }
        
        # 统计
        stats = {lang: 0 for lang in lang_dirs.values()}
        
        # 遍历所有markdown文件
        for md_file in Path('.').rglob('*.md'):
            if 'node_modules' in str(md_file) or '.git' in str(md_file):
                continue
            
            content = md_file.read_text(encoding='utf-8', errors='ignore')
            
            # 提取代码块
            pattern = r'```(\w+)\n(.*?)```'
            matches = re.findall(pattern, content, re.DOTALL)
            
            for lang, code in matches:
                lang_lower = lang.lower()
                if lang_lower in lang_dirs:
                    target_dir = lang_dirs[lang_lower]
                    
                    # 生成文件名
                    safe_name = re.sub(r'[^a-zA-Z0-9]', '_', md_file.stem)
                    filename = f"{safe_name}_{stats[target_dir]}.{lang_lower}"
                    
                    # 写入文件
                    output_path = Path(f'extracted-examples/{target_dir}/{filename}')
                    output_path.write_text(code, encoding='utf-8')
                    
                    stats[target_dir] += 1
        
        # 输出统计
        print("📊 代码示例提取统计:")
        for lang, count in stats.items():
            print(f"  {lang}: {count}个")
        
        # 保存到GitHub Output
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            for lang, count in stats.items():
                if count > 0:
                    f.write(f"has-{lang}=true\n")
        
        EOF
    
    - name: Detect Languages
      id: detect
      run: |
        [ -d "extracted-examples/go" ] && echo "has-go=true" >> $GITHUB_OUTPUT || echo "has-go=false" >> $GITHUB_OUTPUT
        [ -d "extracted-examples/java" ] && echo "has-java=true" >> $GITHUB_OUTPUT || echo "has-java=false" >> $GITHUB_OUTPUT
        [ -d "extracted-examples/python" ] && echo "has-python=true" >> $GITHUB_OUTPUT || echo "has-python=false" >> $GITHUB_OUTPUT
        [ -d "extracted-examples/node" ] && echo "has-node=true" >> $GITHUB_OUTPUT || echo "has-node=false" >> $GITHUB_OUTPUT
    
    - name: Upload Extracted Examples
      uses: actions/upload-artifact@v4
      with:
        name: extracted-examples
        path: extracted-examples/
        retention-days: 7

  # Go代码测试
  test-go:
    runs-on: ubuntu-latest
    needs: extract-examples
    if: needs.extract-examples.outputs.has-go == 'true'
    strategy:
      matrix:
        go-version: ['1.21', '1.22', '1.23']
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Download Examples
      uses: actions/download-artifact@v4
      with:
        name: extracted-examples
        path: extracted-examples/
    
    - name: Test Go Examples
      run: |
        cd extracted-examples/go
        
        # 创建go.mod
        cat > go.mod << 'EOF'
        module github.com/otlp-examples/go-examples
        
        go 1.21
        
        require (
            go.opentelemetry.io/otel v1.32.0
            go.opentelemetry.io/otel/sdk v1.32.0
            go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc v1.32.0
            go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc v1.32.0
            go.opentelemetry.io/otel/exporters/otlp/otlplog/otlploggrpc v0.8.0
        )
        EOF
        
        # 下载依赖
        go mod download
        
        # 测试每个文件
        for file in *.go; do
          echo "Testing $file..."
          if go build -o /dev/null "$file" 2>&1; then
            echo "✅ $file: PASS"
          else
            echo "❌ $file: FAIL"
            go build "$file" 2>&1 || true
          fi
        done
    
    - name: Generate Report
      if: always()
      run: |
        echo "## Go Examples Test Report (Go ${{ matrix.go-version }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "测试结果将在日志中显示" >> $GITHUB_STEP_SUMMARY

  # Java代码测试
  test-java:
    runs-on: ubuntu-latest
    needs: extract-examples
    if: needs.extract-examples.outputs.has-java == 'true'
    strategy:
      matrix:
        java-version: ['17', '21']
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Java ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
    
    - name: Download Examples
      uses: actions/download-artifact@v4
      with:
        name: extracted-examples
        path: extracted-examples/
    
    - name: Test Java Examples
      run: |
        cd extracted-examples/java
        
        # 创建pom.xml
        cat > pom.xml << 'EOF'
        <project>
          <modelVersion>4.0.0</modelVersion>
          <groupId>io.opentelemetry.examples</groupId>
          <artifactId>java-examples</artifactId>
          <version>1.0.0</version>
          
          <properties>
            <maven.compiler.source>17</maven.compiler.source>
            <maven.compiler.target>17</maven.compiler.target>
          </properties>
          
          <dependencies>
            <dependency>
              <groupId>io.opentelemetry</groupId>
              <artifactId>opentelemetry-api</artifactId>
              <version>1.32.0</version>
            </dependency>
            <dependency>
              <groupId>io.opentelemetry</groupId>
              <artifactId>opentelemetry-sdk</artifactId>
              <version>1.32.0</version>
            </dependency>
          </dependencies>
        </project>
        EOF
        
        # 编译测试
        mvn compile 2>&1 || echo "Some examples may have compilation errors"

  # Python代码测试
  test-python:
    runs-on: ubuntu-latest
    needs: extract-examples
    if: needs.extract-examples.outputs.has-python == 'true'
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Download Examples
      uses: actions/download-artifact@v4
      with:
        name: extracted-examples
        path: extracted-examples/
    
    - name: Install Dependencies
      run: |
        pip install \
          opentelemetry-api==1.27.0 \
          opentelemetry-sdk==1.27.0 \
          opentelemetry-exporter-otlp-proto-grpc==1.27.0
    
    - name: Test Python Examples
      run: |
        cd extracted-examples/python
        
        # 语法检查
        for file in *.py; do
          echo "Checking $file..."
          python -m py_compile "$file" 2>&1 && echo "✅ $file: PASS" || echo "❌ $file: FAIL"
        done

  # Node.js代码测试
  test-node:
    runs-on: ubuntu-latest
    needs: extract-examples
    if: needs.extract-examples.outputs.has-node == 'true'
    strategy:
      matrix:
        node-version: ['18', '20', '22']
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Download Examples
      uses: actions/download-artifact@v4
      with:
        name: extracted-examples
        path: extracted-examples/
    
    - name: Install Dependencies
      run: |
        cd extracted-examples/node
        
        # 创建package.json
        cat > package.json << 'EOF'
        {
          "name": "otlp-node-examples",
          "version": "1.0.0",
          "type": "module",
          "dependencies": {
            "@opentelemetry/api": "^1.9.0",
            "@opentelemetry/sdk-node": "^0.54.0",
            "@opentelemetry/exporter-trace-otlp-grpc": "^0.54.0"
          }
        }
        EOF
        
        npm install
    
    - name: Test Node Examples
      run: |
        cd extracted-examples/node
        
        # 语法检查
        for file in *.js *.ts; do
          [ -f "$file" ] || continue
          echo "Checking $file..."
          node --check "$file" 2>&1 && echo "✅ $file: PASS" || echo "❌ $file: FAIL"
        done

  # 生成综合报告
  generate-report:
    runs-on: ubuntu-latest
    needs: [test-go, test-java, test-python, test-node]
    if: always()
    
    steps:
    - name: Generate Summary
      run: |
        echo "# 📊 代码示例测试报告" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 测试矩阵" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| 语言 | 状态 | 版本 |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|------|" >> $GITHUB_STEP_SUMMARY
        echo "| Go | ${{ needs.test-go.result }} | 1.21, 1.22, 1.23 |" >> $GITHUB_STEP_SUMMARY
        echo "| Java | ${{ needs.test-java.result }} | 17, 21 |" >> $GITHUB_STEP_SUMMARY
        echo "| Python | ${{ needs.test-python.result }} | 3.9-3.12 |" >> $GITHUB_STEP_SUMMARY
        echo "| Node.js | ${{ needs.test-node.result }} | 18, 20, 22 |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "详细日志请查看各个测试任务" >> $GITHUB_STEP_SUMMARY

