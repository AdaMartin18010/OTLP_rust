# OTLPÊ†áÂáÜÁâàÊú¨Ëá™Âä®ÁõëÊéß
# 
# ÂäüËÉΩ:
# 1. ÊØèÂ§©Ê£ÄÊü•OpenTelemetryÊ†áÂáÜ‰ªìÂ∫ìÁöÑÊúÄÊñ∞ÁâàÊú¨
# 2. ÂØπÊØîÊú¨Âú∞ËÆ∞ÂΩïÁöÑÁâàÊú¨‰ø°ÊÅØ
# 3. ÂèëÁé∞Êñ∞ÁâàÊú¨Êó∂Ëá™Âä®ÂàõÂª∫IssueÊèêÈÜí
# 4. ÁîüÊàêÁâàÊú¨ÂØπÊØîÊä•Âëä

name: OTLP Version Monitor

on:
  # ÊØèÂ§©UTC 00:00ÊâßË°å (Âåó‰∫¨Êó∂Èó¥08:00)
  schedule:
    - cron: '0 0 * * *'
  
  # ÊâãÂä®Ëß¶Âèë
  workflow_dispatch:
  
  # PRÊó∂Ê£ÄÊü•
  pull_request:
    paths:
      - 'version-tracking/**'

env:
  # ÁõëÊéßÁöÑ‰ªìÂ∫ì
  OTLP_SPEC_REPO: 'open-telemetry/opentelemetry-proto'
  SEMCONV_REPO: 'open-telemetry/semantic-conventions'
  COLLECTOR_REPO: 'open-telemetry/opentelemetry-collector'

jobs:
  check-versions:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Dependencies
      run: |
        pip install requests pyyaml jinja2 packaging
    
    - name: Create Version Tracking Directory
      run: |
        mkdir -p version-tracking
        mkdir -p version-tracking/reports
    
    - name: Fetch Latest OTLP Spec Version
      id: otlp-spec
      run: |
        LATEST_TAG=$(curl -s https://api.github.com/repos/${{ env.OTLP_SPEC_REPO }}/releases/latest | jq -r .tag_name)
        RELEASE_DATE=$(curl -s https://api.github.com/repos/${{ env.OTLP_SPEC_REPO }}/releases/latest | jq -r .published_at)
        echo "version=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "date=$RELEASE_DATE" >> $GITHUB_OUTPUT
        echo "‚úÖ OTLP Spec: $LATEST_TAG ($RELEASE_DATE)"
    
    - name: Fetch Latest Semantic Conventions Version
      id: semconv
      run: |
        LATEST_TAG=$(curl -s https://api.github.com/repos/${{ env.SEMCONV_REPO }}/releases/latest | jq -r .tag_name)
        RELEASE_DATE=$(curl -s https://api.github.com/repos/${{ env.SEMCONV_REPO }}/releases/latest | jq -r .published_at)
        echo "version=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "date=$RELEASE_DATE" >> $GITHUB_OUTPUT
        echo "‚úÖ Semantic Conventions: $LATEST_TAG ($RELEASE_DATE)"
    
    - name: Fetch Latest Collector Version
      id: collector
      run: |
        LATEST_TAG=$(curl -s https://api.github.com/repos/${{ env.COLLECTOR_REPO }}/releases/latest | jq -r .tag_name)
        RELEASE_DATE=$(curl -s https://api.github.com/repos/${{ env.COLLECTOR_REPO }}/releases/latest | jq -r .published_at)
        echo "version=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "date=$RELEASE_DATE" >> $GITHUB_OUTPUT
        echo "‚úÖ Collector: $LATEST_TAG ($RELEASE_DATE)"
    
    - name: Load Current Versions
      id: current
      run: |
        if [ -f version-tracking/current-versions.yml ]; then
          cat version-tracking/current-versions.yml
        else
          echo "‚ö†Ô∏è No version tracking file found, will create new one"
        fi
    
    - name: Compare Versions and Generate Report
      id: compare
      run: |
        python3 << 'EOF'
        import os
        import yaml
        import json
        from datetime import datetime
        from pathlib import Path
        
        # Ëé∑ÂèñÊúÄÊñ∞ÁâàÊú¨
        latest_versions = {
            'otlp_spec': {
                'version': '${{ steps.otlp-spec.outputs.version }}',
                'date': '${{ steps.otlp-spec.outputs.date }}',
                'repo': '${{ env.OTLP_SPEC_REPO }}'
            },
            'semantic_conventions': {
                'version': '${{ steps.semconv.outputs.version }}',
                'date': '${{ steps.semconv.outputs.date }}',
                'repo': '${{ env.SEMCONV_REPO }}'
            },
            'collector': {
                'version': '${{ steps.collector.outputs.version }}',
                'date': '${{ steps.collector.outputs.date }}',
                'repo': '${{ env.COLLECTOR_REPO }}'
            }
        }
        
        # ËØªÂèñÂΩìÂâçÁâàÊú¨
        version_file = Path('version-tracking/current-versions.yml')
        if version_file.exists():
            with open(version_file, 'r') as f:
                current_versions = yaml.safe_load(f) or {}
        else:
            current_versions = {}
        
        # ÂØπÊØîÁâàÊú¨
        updates = []
        for key, latest in latest_versions.items():
            current = current_versions.get(key, {})
            if current.get('version') != latest['version']:
                updates.append({
                    'name': key,
                    'old_version': current.get('version', 'N/A'),
                    'new_version': latest['version'],
                    'repo': latest['repo']
                })
                print(f"üÜï Update detected: {key} {current.get('version', 'N/A')} ‚Üí {latest['version']}")
        
        # ËæìÂá∫ÁªìÊûú
        if updates:
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                f.write(f"has_updates=true\n")
                f.write(f"update_count={len(updates)}\n")
            
            # ‰øùÂ≠òÊõ¥Êñ∞ËØ¶ÊÉÖ
            with open('version-tracking/updates.json', 'w') as f:
                json.dump(updates, f, indent=2)
        else:
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                f.write(f"has_updates=false\n")
            print("‚úÖ All versions are up to date")
        
        # Êõ¥Êñ∞ÁâàÊú¨Êñá‰ª∂
        current_versions.update(latest_versions)
        current_versions['last_checked'] = datetime.utcnow().isoformat()
        
        with open('version-tracking/current-versions.yml', 'w') as f:
            yaml.dump(current_versions, f, default_flow_style=False, sort_keys=False)
        
        EOF
    
    - name: Generate Update Report
      if: steps.compare.outputs.has_updates == 'true'
      run: |
        python3 << 'EOF'
        import json
        from datetime import datetime
        
        with open('version-tracking/updates.json', 'r') as f:
            updates = json.load(f)
        
        report = f"""# OTLPÊ†áÂáÜÁâàÊú¨Êõ¥Êñ∞Êä•Âëä
        
        **Ê£ÄÊµãÊó∂Èó¥**: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}  
        **ÂèëÁé∞Êõ¥Êñ∞**: {len(updates)}‰∏™
        
        ---
        
        ## üì¶ ÁâàÊú¨Êõ¥Êñ∞ËØ¶ÊÉÖ
        
        """
        
        for update in updates:
            name_display = {
                'otlp_spec': 'OTLP Protocol Specification',
                'semantic_conventions': 'Semantic Conventions',
                'collector': 'OpenTelemetry Collector'
            }
            
            report += f"""
        ### {name_display.get(update['name'], update['name'])}
        
        - **‰ªìÂ∫ì**: `{update['repo']}`
        - **ÊóßÁâàÊú¨**: `{update['old_version']}`
        - **Êñ∞ÁâàÊú¨**: `{update['new_version']}` üÜï
        - **ÂèòÊõ¥ÈìæÊé•**: https://github.com/{update['repo']}/compare/{update['old_version']}...{update['new_version']}
        - **Release Notes**: https://github.com/{update['repo']}/releases/tag/{update['new_version']}
        
        **ÈúÄË¶ÅÊõ¥Êñ∞ÁöÑÊñáÊ°£**:
        """
            
            if 'otlp_spec' in update['name']:
                report += """
        - [ ] `01_OTLPÊ†∏ÂøÉÂçèËÆÆ/01_ÂçèËÆÆÊ¶ÇËø∞.md`
        - [ ] `01_OTLPÊ†∏ÂøÉÂçèËÆÆ/02_gRPC‰º†Ëæì.md`
        - [ ] `01_OTLPÊ†∏ÂøÉÂçèËÆÆ/03_HTTP‰º†Ëæì.md`
        - [ ] `03_Êï∞ÊçÆÊ®°Âûã/` (Traces/Metrics/Logs)
        """
            elif 'semantic_conventions' in update['name']:
                report += """
        - [ ] `02_Semantic_Conventions/00_ËØ≠‰πâÁ∫¶ÂÆöÊÄªËßà.md`
        - [ ] `02_Semantic_Conventions/01_ÈÄöÁî®ÂçèËÆÆÂ±ûÊÄß/`
        - [ ] `02_Semantic_Conventions/02_ËøΩË∏™Â±ûÊÄß/`
        - [ ] `02_Semantic_Conventions/03_ÊåáÊ†áÂ±ûÊÄß/`
        """
            elif 'collector' in update['name']:
                report += """
        - [ ] `04_Ê†∏ÂøÉÁªÑ‰ª∂/01_CollectorÊû∂ÊûÑ.md`
        - [ ] `04_Ê†∏ÂøÉÁªÑ‰ª∂/02_Êé•Êî∂Âô®.md`
        - [ ] `04_Ê†∏ÂøÉÁªÑ‰ª∂/03_Â§ÑÁêÜÂô®.md`
        - [ ] `04_Ê†∏ÂøÉÁªÑ‰ª∂/04_ÂØºÂá∫Âô®.md`
        """
            
            report += "\n---\n"
        
        report += f"""
        ## üîÑ ‰∏ã‰∏ÄÊ≠•Ë°åÂä®
        
        1. **ÂÆ°Êü•ÂèòÊõ¥**: Êü•Áúã‰∏äËø∞Release Notes,‰∫ÜËß£ÂÖ∑‰ΩìÂèòÊõ¥ÂÜÖÂÆπ
        2. **ËØÑ‰º∞ÂΩ±Âìç**: Âà§Êñ≠Âì™‰∫õÁé∞ÊúâÊñáÊ°£ÈúÄË¶ÅÊõ¥Êñ∞
        3. **Êõ¥Êñ∞ÊñáÊ°£**: Ê†πÊçÆÊñ∞ÁâàÊú¨Êõ¥Êñ∞Áõ∏Â∫îÊñáÊ°£
        4. **ÊµãËØïÈ™åËØÅ**: È™åËØÅ‰ª£Á†ÅÁ§∫‰æãÊòØÂê¶‰ªçÁÑ∂ÊúâÊïà
        5. **ÂÖ≥Èó≠Issue**: ÂÆåÊàêÊõ¥Êñ∞ÂêéÂÖ≥Èó≠Êú¨Issue
        
        ## üìã Êõ¥Êñ∞Ê£ÄÊü•Ê∏ÖÂçï
        
        - [ ] Â∑≤ÂÆ°Êü•ÊâÄÊúâRelease Notes
        - [ ] Â∑≤ËØÜÂà´ÈúÄË¶ÅÊõ¥Êñ∞ÁöÑÊñáÊ°£
        - [ ] Â∑≤ÂÆåÊàêÊñáÊ°£Êõ¥Êñ∞
        - [ ] Â∑≤È™åËØÅ‰ª£Á†ÅÁ§∫‰æã
        - [ ] Â∑≤Êõ¥Êñ∞ÁâàÊú¨Âè∑Ê†áËØÜ
        - [ ] Â∑≤Êèê‰∫§PR
        
        ---
        
        *Êú¨Êä•ÂëäÁî±GitHub ActionsËá™Âä®ÁîüÊàê*  
        *Workflow: `.github/workflows/otlp-version-monitor.yml`*
        """
        
        with open('version-tracking/reports/update-report-latest.md', 'w') as f:
            f.write(report)
        
        # ‰øùÂ≠òIssueÂÜÖÂÆπ
        with open('version-tracking/issue-body.md', 'w') as f:
            f.write(report)
        
        print("‚úÖ Report generated")
        print(report)
        EOF
    
    - name: Create Issue for Updates
      if: steps.compare.outputs.has_updates == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const issueBody = fs.readFileSync('version-tracking/issue-body.md', 'utf8');
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üîî OTLPÊ†áÂáÜÁâàÊú¨Êõ¥Êñ∞Ê£ÄÊµã - ${new Date().toISOString().split('T')[0]}`,
            body: issueBody,
            labels: ['version-update', 'P0', 'documentation']
          });
    
    - name: Commit Updated Versions
      if: steps.compare.outputs.has_updates == 'true'
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add version-tracking/
        git commit -m "chore: update OTLP version tracking [skip ci]" || echo "No changes to commit"
        git push || echo "Nothing to push"
    
    - name: Upload Report as Artifact
      if: steps.compare.outputs.has_updates == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: version-update-report-${{ github.run_number }}
        path: version-tracking/reports/
        retention-days: 90
    
    - name: Send Notification (Optional)
      if: steps.compare.outputs.has_updates == 'true'
      run: |
        echo "::notice::ÂèëÁé∞ ${{ steps.compare.outputs.update_count }} ‰∏™ÁâàÊú¨Êõ¥Êñ∞,Â∑≤ÂàõÂª∫Issue"
    
    - name: Summary
      run: |
        echo "## üìä ÁâàÊú¨Ê£ÄÊü•ÊëòË¶Å" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| ÁªÑ‰ª∂ | ÁâàÊú¨ | ÂèëÂ∏ÉÊó•Êúü |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|----------|" >> $GITHUB_STEP_SUMMARY
        echo "| OTLP Spec | ${{ steps.otlp-spec.outputs.version }} | ${{ steps.otlp-spec.outputs.date }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Semantic Conventions | ${{ steps.semconv.outputs.version }} | ${{ steps.semconv.outputs.date }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Collector | ${{ steps.collector.outputs.version }} | ${{ steps.collector.outputs.date }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.compare.outputs.has_updates }}" == "true" ]; then
          echo "üÜï **ÂèëÁé∞ ${{ steps.compare.outputs.update_count }} ‰∏™ÁâàÊú¨Êõ¥Êñ∞!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚úÖ **ÊâÄÊúâÁâàÊú¨ÈÉΩÊòØÊúÄÊñ∞ÁöÑ**" >> $GITHUB_STEP_SUMMARY
        fi

  # ÂèØÈÄâ: ÊØèÂë®ÁîüÊàêÂÆåÊï¥ÁöÑÁâàÊú¨ÂéÜÂè≤Êä•Âëä
  weekly-report:
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 0 * * 0'  # ÊØèÂë®Êó•
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Generate Weekly Report
      run: |
        python3 << 'EOF'
        import yaml
        from datetime import datetime, timedelta
        from pathlib import Path
        
        version_file = Path('version-tracking/current-versions.yml')
        if not version_file.exists():
            print("No version data available")
            exit(0)
        
        with open(version_file, 'r') as f:
            versions = yaml.safe_load(f)
        
        report = f"""# OTLPÊ†áÂáÜÁâàÊú¨Âë®Êä•
        
        **Êä•ÂëäÂë®Êúü**: {(datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')} ~ {datetime.now().strftime('%Y-%m-%d')}
        
        ## üì¶ ÂΩìÂâçÁâàÊú¨
        
        | ÁªÑ‰ª∂ | ÁâàÊú¨ | ÂèëÂ∏ÉÊó•Êúü | ‰ªìÂ∫ì |
        |------|------|----------|------|
        """
        
        for key, data in versions.items():
            if key == 'last_checked':
                continue
            name = key.replace('_', ' ').title()
            report += f"| {name} | {data['version']} | {data['date'][:10]} | [{data['repo']}](https://github.com/{data['repo']}) |\n"
        
        report += f"""
        
        ## üìà ÁâàÊú¨Ë∂ãÂäø
        
        - ÊúÄËøë‰∏ÄÂë®Êú™ÂèëÁé∞ÈáçÂ§ßÁâàÊú¨Êõ¥Êñ∞
        - ÊñáÊ°£‰øùÊåÅ‰∏éÊúÄÊñ∞Ê†áÂáÜÂêåÊ≠•
        
        ## üîó ÊúâÁî®ÈìæÊé•
        
        - [OTLP Specification](https://github.com/open-telemetry/opentelemetry-proto)
        - [Semantic Conventions](https://github.com/open-telemetry/semantic-conventions)
        - [Collector Releases](https://github.com/open-telemetry/opentelemetry-collector/releases)
        
        ---
        
        *‰∏äÊ¨°Ê£ÄÊü•Êó∂Èó¥: {versions.get('last_checked', 'N/A')}*
        """
        
        Path('version-tracking/reports').mkdir(parents=True, exist_ok=True)
        with open(f'version-tracking/reports/weekly-{datetime.now().strftime("%Y%m%d")}.md', 'w') as f:
            f.write(report)
        
        print(report)
        EOF
    
    - name: Upload Weekly Report
      uses: actions/upload-artifact@v4
      with:
        name: weekly-report-${{ github.run_number }}
        path: version-tracking/reports/weekly-*.md
        retention-days: 365

