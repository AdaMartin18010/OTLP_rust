[package]
name = "otlp"
version = "0.1.0"
edition = "2024"
rust-version = "1.90"
authors = ["Rust OTLP Team"]
description = "OpenTelemetry Protocol (OTLP) implementation with Rust 1.90+ features"
license = "MIT OR Apache-2.0"
keywords = ["opentelemetry", "otlp", "observability", "telemetry", "async", "grpc"]
categories = ["development-tools::debugging", "network-programming", "asynchronous"]

[dependencies]
# ========== 核心依赖 - 最小化集合 ==========
# OpenTelemetry核心 - 只保留必要的
opentelemetry = { workspace = true }
opentelemetry_sdk = { workspace = true }
opentelemetry-otlp = { workspace = true }

# 异步运行时 - 核心组件
tokio = { workspace = true, features = ["rt", "rt-multi-thread", "net", "time", "macros"] }
futures = { workspace = true }

# 序列化 - 核心功能
serde = { workspace = true }
serde_json = { workspace = true }
bincode = "1.3"

# 并发和同步 - 高性能组件
parking_lot = { workspace = true }
crossbeam = { workspace = true }

# 错误处理 - 必要组件
anyhow = { workspace = true }
thiserror = { workspace = true }

# 时间处理 - 核心功能
chrono = { workspace = true }

# 基础工具 - 最小集合
uuid = { workspace = true }
url = { workspace = true }
bytes = { workspace = true }

# 系统信息 - 性能优化
num_cpus = { workspace = true }

# 随机数生成 - 测试和ID生成
rand = { workspace = true }

# 加密和哈希 - 安全功能
sha2 = "0.10"

# 压缩算法 - 性能优化
flate2 = "1.1"

# ========== 可选依赖 - 按需加载 ==========
# gRPC支持 - 可选功能
tonic = { workspace = true, optional = true }
prost = { workspace = true, optional = true }
opentelemetry-proto = { workspace = true, optional = true }

# HTTP客户端 - 可选功能
hyper = { workspace = true, optional = true }
reqwest = { workspace = true, optional = true }

# 异步trait - 可选功能
async-trait = { workspace = true, optional = true }

# 日志和追踪 - 可选功能
tracing = { workspace = true, optional = true }
tracing-subscriber = { workspace = true, optional = true }

# 配置管理 - 可选功能
config = { workspace = true, optional = true }

# 高级数据结构 - 可选功能
dashmap = { version = "6.1", optional = true }

[dev-dependencies]
# 测试依赖 - 最小集合
tokio-test = { workspace = true }
criterion = { workspace = true }
tempfile = { workspace = true }
mockall = { workspace = true }

# 集成测试依赖
warp = { version = "0.4.2", features = ["server"] }

[[bench]]
name = "performance_benchmarks"
harness = false

[[bench]]
name = "resilience_benchmarks"
harness = false

[[bench]]
name = "advanced_performance_benchmarks"
harness = false

[features]
# ========== 特性标志 - 模块化加载 ==========
default = ["async", "grpc", "http", "logging"]

# 核心功能特性
async = ["tokio/full", "async-trait"]
grpc = ["tonic", "prost", "opentelemetry-proto", "opentelemetry-proto/gen-tonic"]
http = ["reqwest", "hyper"]

# 可观测性特性
logging = ["tracing", "tracing-subscriber"]
monitoring = ["logging"]

# 配置管理特性
config = ["config"]

# 高级数据结构特性
advanced = ["dashmap"]

# 完整功能特性
full = ["async", "grpc", "http", "logging", "config", "advanced", "monitoring"]

# ========== 性能优化特性 ==========
# SIMD优化
simd = []

# 零拷贝传输
zero-copy = []

# 对象池优化
object-pool = []

# 内存优化
memory-optimized = ["simd", "zero-copy", "object-pool"]

# ========== 平台特定特性 ==========
# Linux特定优化
linux = []

# Windows特定优化
windows = []

# macOS特定优化
macos = []

# ========== 协议支持特性 ==========
# gRPC协议
grpc-protocol = ["grpc"]

# HTTP协议
http-protocol = ["http"]

# 二进制协议
binary-protocol = []

# JSON协议
json-protocol = []

# ========== 传输特性 ==========
# 压缩传输
compression = ["flate2"]

# 加密传输
encryption = ["sha2"]

# 批量传输
batching = []

# 流式传输
streaming = []
