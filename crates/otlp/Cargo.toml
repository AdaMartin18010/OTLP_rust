[package]
name = "otlp"
version = "0.1.0"
edition = "2024"
resolver = "3"
rust-version = "1.90"
authors = ["Rust OTLP Team"]
description = "OpenTelemetry Protocol (OTLP) implementation with Rust 1.90+ features"
license = "MIT OR Apache-2.0"
keywords = ["opentelemetry", "otlp", "observability", "telemetry", "async", "grpc"]
categories = ["development-tools::debugging", "network-programming", "asynchronous"]

[dependencies]
# OpenTelemetry核心依赖（统一使用 v0.31.0 - 最新稳定版本 2025年10月23日）
opentelemetry = { workspace = true }
opentelemetry_sdk = { workspace = true }
opentelemetry-otlp = { workspace = true }
opentelemetry-proto = { workspace = true, optional = true }

# 异步运行时和网络
tokio = { workspace = true }
tokio-util = { workspace = true }
futures = { workspace = true }

# gRPC和HTTP客户端
tonic = { workspace = true, optional = true }
prost = { workspace = true, optional = true }
hyper = { workspace = true, optional = true }
reqwest = { workspace = true, optional = true }

# 序列化和反序列化
serde = { workspace = true }
serde_json = { workspace = true }
prost-types = { workspace = true }
bincode = { workspace = true }  # 使用工作区版本

# 并发和同步
parking_lot = { workspace = true }
crossbeam = { workspace = true }
dashmap = { workspace = true }  # 使用工作区版本

# 压缩算法（使用稳定版本 - 2025-10-26更新）
flate2 = "1.1.5"               # gzip压缩 (更新: 1.1.4 -> 1.1.5)
brotli = "8.0.2"               # Brotli压缩
zstd = "0.13.3"                # Zstandard压缩
lz4_flex = "0.11.5"            # LZ4压缩

# 异步trait
async-trait = { workspace = true, optional = true }

# 系统信息
num_cpus = { workspace = true }

# 随机数生成
rand = { workspace = true }

# 加密和哈希
sha2 = { workspace = true }    # 使用工作区版本

# 错误处理和日志
anyhow = { workspace = true }
thiserror = { workspace = true }
tracing = { workspace = true }
tracing-subscriber = { workspace = true }

# 配置管理
config = { workspace = true }

# 时间处理
chrono = { workspace = true }

# 其他常用库
uuid = { workspace = true }
url = { workspace = true }
bytes = { workspace = true }
hex = { workspace = true }     # 使用工作区版本
async-compression = { version = "0.4.32", features = ["tokio", "zstd", "gzip", "brotli"] }

# Profiling依赖
backtrace = { version = "0.3", optional = true }

[dev-dependencies]
tokio-test = { workspace = true }
criterion = { workspace = true }
tempfile = { workspace = true }
proptest = { workspace = true }
mockall = { workspace = true }
warp = { version = "0.4.2", features = ["server"] }

# Kubernetes dependencies for examples
kube = { version = "0.97", features = ["client", "runtime", "derive"] }
k8s-openapi = { version = "0.23", features = ["v1_31"] }
serde_yaml = "0.9"

[[bench]]
name = "simple_benchmarks"
harness = false

[[bench]]
name = "comprehensive_benchmarks"
harness = false

[features]
default = ["async", "grpc", "http"]
full = ["async", "grpc", "http", "monitoring", "backtrace"]

# 核心功能特性
async = ["tokio/full", "async-trait"]
grpc = ["tonic", "prost", "opentelemetry-proto", "opentelemetry-proto/gen-tonic"]
http = ["reqwest", "hyper"]

# 监控和可观测性特性
monitoring = []

# 性能优化特性
performance = []

# Profiling特性
backtrace = ["dep:backtrace"]

[[example]]
name = "quick_optimizations_demo"
path = "examples/quick_optimizations_demo.rs"

[[example]]
name = "integrated_optimizations_demo"
path = "examples/integrated_optimizations_demo.rs"

[[example]]
name = "enhanced_monitoring_demo"
path = "examples/enhanced_monitoring_demo.rs"

[[example]]
name = "k8s_complete_deployment_demo"
path = "examples/k8s_complete_deployment_demo.rs"
