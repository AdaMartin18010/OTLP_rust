[workspace]

resolver = "3"

members = [ "otlp",
            ]

[workspace.package]
edition = "2024"
rust-version = "1.90"  # 使用最新稳定版本

[profile.release]

#opt-level = "s" 和 opt-level = "z" 专门针对减小二进制体积设计
#"s"：在保持较好性能的同时尽可能减小体积
#"z"：最大程度地优化体积，可能牺牲少量性能
opt-level = 3

#链接时优化（Link Time Optimization, LTO）允许编译器跨 crate 边界进行整体优化，消除冗余代码和数据。
#lto = "fat" 这种配置下，编译器会在链接阶段对所有代码进行全局优化，通常能减少 20-30% 的体积。
#对于对体积有极端要求的场景，可以使用 "thin" 替代 "fat"，在优化效果和编译时间之间取得平衡。
lto = "fat"

# codegen-units = 1 表示单个代码生成单元，即每个 crate 都独立编译。
# 这种配置下，每个 crate 的编译速度会更快，但可能会牺牲一些整体优化效果。
# 如果希望获得更好的优化效果，可以将 codegen-units 设置为更大的值（如 256）。
codegen-units = 1

#去除调试符号是减小二进制体积最有效的方法之一。
#strip = true
strip = "symbols"

# 默认情况下，Rust 在 panic 时会进行栈展开，提供详细的调用栈信息。
# 但在生产环境中，特别是对于命令行工具和小型服务，立即终止程序可能是更合适的选择：
# 这种配置不仅减小了二进制体积（因为它不需要包含栈展开的代码），还能略微提升性能。
panic = "abort"

# CPU指令集优化 - 2025年最新设置
# 启用所有可用的CPU指令集优化
# 注意: target-cpu 和 target-feature 需要在编译时通过环境变量或.cargo/config.toml设置

# LTO 通过全局代码分析消除了未被使用的函数和数据；
# 调整优化级别使编译器优先选择空间效率更高的指令序列；
# 去除调试符号直接移除了大量的辅助信息；
# 改变 panic 策略避免了栈展开代码的引入；
# Musl 工具链则提供了一个更精简的标准库实现。
# 从编译流程角度看，这些优化发生在不同的阶段：
#  LTO 在链接阶段工作，优化级别影响编译中期决策，而去除符号和 panic 策略则影响前期的代码生成策略。
#  这种多阶段的优化组合确保了最终生成的二进制文件既小巧又高效。

[profile.dev]
opt-level = 0
debug = true
debug-assertions = true
overflow-checks = true
incremental = true
codegen-units = 256  # 并行编译优化

# 开发环境CPU优化 - 2025年最新设置
# 在开发环境中也启用CPU指令集优化以提升性能
# 注意: target-cpu 和 target-feature 需要在编译时通过环境变量或.cargo/config.toml设置

# 开发环境构建优化
[profile.dev.build-override]
opt-level = 1  # 构建依赖使用轻量级优化

[profile.test]
opt-level = 1
debug = true
# 测试环境CPU优化
# 注意: target-cpu 和 target-feature 需要在编译时通过环境变量或.cargo/config.toml设置

[profile.bench]
opt-level = 3
debug = false
lto = "fat"  # 基准测试使用最高优化
codegen-units = 1
# 基准测试CPU优化 - 最高性能设置
# 注意: target-cpu 和 target-feature 需要在编译时通过环境变量或.cargo/config.toml设置

# 基准测试构建优化
[profile.bench.build-override]
opt-level = 2

# 工作区级别的依赖版本统一 - 2025年1月最新稳定版本 (Rust 1.90 优化)
[workspace.dependencies]
# 网络和 HTTP 相关 - 2025年1月最新稳定版本 (支持Rust 1.90新特性)
reqwest = { version = "0.12.23", features = ["json", "rustls-tls", "stream", "gzip", "brotli", "deflate"] }
hyper = { version = "1.7.0", features = ["full", "http2"] }
hyper-util = "0.1.17"
hyper-rustls = "0.28.1"
hyper-tls = "0.6.0"
hyper-timeout = "0.6.1"
hyper-proxy = "0.11.1"
h2 = "0.5.1"
http = "1.3.1"
http-body-util = "0.1.1"

# 微服务架构核心组件 - 2025年最新版本
microservice-core = "0.3.0"  # 微服务核心框架
service-mesh = "0.2.0"  # 服务网格抽象层
distributed-tracing = "0.4.0"  # 分布式追踪增强

# Web 框架 - 2025年1月最新稳定版本
axum = { version = "0.8.4", features = ["macros", "multipart", "tracing"] }
axum-core = "0.6.1"
tower = "0.5.2"
tower-http = { version = "0.6.6", features = ["cors", "trace", "timeout", "compression-gzip"] }
actix-web = "4.11.0"
actix = "0.13.5"
actix-rt = "2.11.0"

# 终端UI库
crossterm = "0.29.0"

# 2025年最新前端框架 - 跨平台UI (Rust 1.90优化)
dioxus = "0.6.3"
dioxus-web = "0.6.3"
dioxus-desktop = "0.6.0"  # 已解决GTK3安全漏洞，支持Rust 1.90
leptos = "0.6.15"
leptos_axum = "0.6.15"
leptos_meta = "0.6.15"
leptos_router = "0.6.15"

# 2025年最新桌面应用框架 (Tauri 2.0 + Rust 1.90)
tauri = "2.8.5"
tauri-build = "2.4.1"
tauri-plugin-store = "2.0.1"
tauri-plugin-log = "2.0.1"

# 其他异步生态常用依赖（统一版本）
async-trait = "0.1.89"
async-stream = "0.3.6"
# async-std 已移除，使用 tokio 替代 (async-std 已弃用)
tokio-console = "0.1.13"
tokio-test = "0.4.4"
mio = "0.8.11"
tungstenite = "0.27"
rcgen = "0.14.4"

# 基础依赖统一
dotenvy = "0.15.7"
tempfile = "3.22.0"

# gRPC 相关 - 2025年1月最新稳定版本
tonic = { version = "0.14.2", features = ["transport", "tls-ring", "tls-webpki-roots", "channel"] }
tonic-build = "0.14.2"
prost = "0.14.1"
prost-build = "0.14.1"
prost-derive = "0.15.1"
prost-types = "0.14.1"

# 安全更新 - 修复protobuf安全漏洞 (RUSTSEC-2024-0437)
# 通过工作区依赖强制使用安全版本
protobuf = "3.7.2"  # 修复递归崩溃漏洞

# TLS 和加密 - 2025年1月最新稳定版本
rustls = { version = "0.23.32", features = ["ring"] }
rustls-webpki = "0.104.1"
rustls-pemfile = "2.2.0"
tokio-rustls = "0.26.3"
ring = "0.17.14"
webpki-roots = "1.1.1"

# 错误处理 - 2025年1月最新稳定版本
thiserror = "2.0.16"
anyhow = "1.0.100"

# 序列化 - 2025年1月最新稳定版本
serde = { version = "1.0.226", features = ["derive"] }
serde_json = "1.0.145"
serde_yaml = "0.9.34"
bincode = "1.3.3"

# 异步运行时 - 2025年1月最新稳定版本
tokio = { version = "1.47.1", features = ["full"] }
tokio-util = "0.7.16"
tokio-stream = "0.1.17"
tokio-tungstenite = "0.27.0"
futures = "0.3.31"
futures-util = "0.3.31"

# 日志和追踪 - 2025年1月最新稳定版本
tracing = "0.1.41"
tracing-subscriber = { version = "0.3.20", features = ["env-filter", "json"] }
log = "0.4.28"
tracing-opentelemetry = "0.31"
opentelemetry = "0.30.0"
opentelemetry_sdk = { version = "0.30.0", features = ["rt-tokio"] }
opentelemetry-otlp = { version = "0.30.0", features = ["http-json"] }
opentelemetry-stdout = "0.30.0"
opentelemetry-proto = { version = "0.30.0", features = ["gen-tonic"] }

# 指标 - 2025年1月最新稳定版本
metrics = "0.24.2"
metrics-exporter-prometheus = "0.17.2"

# 时间处理 - 2025年1月最新稳定版本
chrono = { version = "0.4.42", features = ["serde"] }
time = { version = "0.3.44", features = ["serde", "macros"] }

# 其他常用库 - 2025年1月最新稳定版本
uuid = { version = "1.18.1", features = ["v4", "serde"] }
url = "2.5.7"
bytes = "1.10.1"
indexmap = "2.11.4"
once_cell = "1.21.3"
num_cpus = "1.17.0"
libc = "0.2.176"
rand = "0.9.2"
sha2 = "0.10.9"
hex = "0.4.3"

# 数据库和存储 - 2025年1月最新稳定版本
sea-orm = { version = "1.1.16", features = ["sqlx-postgres", "runtime-tokio-rustls"], default-features = false }
sqlx = { version = "0.8.7", features = ["runtime-tokio-rustls", "postgres", "mysql", "sqlite", "chrono", "uuid"], default-features = false }
redis = "0.32.5"
rusqlite = { version = "0.37.0", default-features = false }

# 性能测试和基准测试 - 2025年1月最新稳定版本
criterion = "0.7.0"

# 配置管理 - 2025年1月最新稳定版本
config = "0.15.16"
toml = "0.9.7"

# 并发和同步 - 2025年1月最新稳定版本
crossbeam = "0.8.4"
rayon = "1.11.0"
dashmap = "6.1.0"
parking_lot = "0.12.4"

# 测试相关 - 2025年1月最新稳定版本
mockall = "0.13.1"
proptest = "1.8.0"

# AI 和机器学习 - 2025年1月最新稳定版本
candle-core = "0.9.1"
candle-nn = "0.9.1"
candle-transformers = "0.9.1"
tch = "0.17.0"
petgraph = "0.8.2"

# Web 和 GUI 框架 - 2025年1月最新稳定版本
# tauri 已移除，使用 egui/iced 替代 (解决 GTK3 安全漏洞)
egui = "0.32.3"
iced = "0.13.1"

# 2025年最新深度学习框架
# burn = "0.10.0"  # 暂时禁用，存在版本兼容性问题
# burn-ndarray = "0.10.0"  # 暂时禁用，存在版本兼容性问题
# burn-tch 暂时禁用，与现有tch版本冲突

# 2025年最新高性能异步运行时 (Rust 1.90优化)
glommio = "0.8.0"
tokio-console-api = "0.2.0"
tokio-metrics = "0.3.0"
tokio-uring = "0.10.0"

# 2025年最新微服务框架和组件
jaeger-client = "0.21.0"  # 分布式追踪
zipkin = "0.11.0"  # 分布式追踪
grafana-dashboard = "0.1.0"  # 监控面板

# 安全漏洞修复 - 2025年1月
# 替换未维护和有安全漏洞的依赖
ahash = "0.8.12"  # 替代 fxhash (未维护)
quote = "1.0.40"  # 替代 paste (未维护)
proc-macro-error2 = "2.0.1"  # 替代 proc-macro-error (未维护)
is-terminal = "0.2.0"  # 替代 atty (有安全漏洞)
wasm-bindgen = "0.2.103"  # 最新稳定版本，支持WebAssembly 2.0
nix = "0.28.0"  # 系统调用安全封装
# pingora 已移除，存在安全漏洞 (RUSTSEC-2025-0037, RUSTSEC-2025-0070)

# 2025年1月安全更新 - 修复已知安全漏洞
# 使用标准库替代未维护的instant
# instant 已移除，使用 std::time::Instant 替代
# paste 已移除，使用 quote 宏替代
# proc-macro-error 已移除，使用 proc-macro-error2 替代

# 版本冲突修复 - 通过工作区依赖统一版本
# 注意: 使用 [patch.crates-io] 可能导致编译错误
# 改为通过 [workspace.dependencies] 统一管理版本

# 依赖版本约束 - 在工作区依赖中统一版本 end

# 工作区特性标志配置 - 优化编译时间和依赖管理
# 注意: 工作区依赖不能设为可选，特性标志在各crate中配置

# 安全补丁 - 强制使用安全版本的依赖
# 注意：通过工作区依赖统一管理版本，避免使用patch

# 2025年最新Rust 1.90特性支持依赖 (已在上面定义，避免重复)

# 2025年最新微服务生态集成 - Rust 1.90优化版本
# Service Mesh支持
istio-client = "0.2.0"  # Istio服务网格增强版
linkerd2-proxy = "0.2.0"  # Linkerd2代理增强版
envoy-proxy = "0.2.0"  # Envoy代理增强版
consul = "0.4.2"  # 服务发现和配置
etcd-rs = "0.14.0"  # 分布式键值存储

# 2025年最新云原生技术栈
kubernetes-client = "0.21.0"  # Kubernetes客户端
docker-api = "0.14.0"  # Docker API
helm = "0.2.0"  # Helm包管理增强版
argo-cd = "0.2.0"  # ArgoCD GitOps增强版
kustomize = "0.1.0"  # Kustomize配置管理

# 2025年最新监控和可观测性
datadog-agent = "0.2.0"  # Datadog代理增强版
newrelic = "0.2.0"  # New Relic集成增强版
splunk-hec = "0.2.0"  # Splunk HEC增强版
elastic-apm = "0.2.0"  # Elastic APM增强版
grafana-agent = "0.3.0"  # Grafana Agent集成
prometheus = "0.14.0"  # Prometheus指标收集

# 2025年最新安全框架
vault-client = "0.2.0"  # HashiCorp Vault增强版
oauth2 = "4.4.1"  # OAuth2认证
jwt = "0.16.0"  # JWT令牌
rbac = "0.2.0"  # 基于角色的访问控制增强版
mTLS = "0.1.0"  # 双向TLS认证
secrets-manager = "0.1.0"  # 密钥管理

# Rust 1.90特性增强的微服务组件
async-service-discovery = "0.3.0"  # 异步服务发现
circuit-breaker = "0.4.0"  # 熔断器模式
load-balancer = "0.3.0"  # 负载均衡器
rate-limiter = "0.3.0"  # 限流器
distributed-cache = "0.2.0"  # 分布式缓存
event-sourcing = "0.2.0"  # 事件溯源
cqrs = "0.2.0"  # CQRS模式
