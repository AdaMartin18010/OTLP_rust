[workspace]

resolver = "3"

members = [ "crates/otlp",
            "crates/reliability",
            ]

[workspace.package]
edition = "2024"
rust-version = "1.90"  # 使用最新稳定版本

[profile.release]

#opt-level = "s" 和 opt-level = "z" 专门针对减小二进制体积设计
#"s"：在保持较好性能的同时尽可能减小体积
#"z"：最大程度地优化体积，可能牺牲少量性能
opt-level = 3

#链接时优化（Link Time Optimization, LTO）允许编译器跨 crate 边界进行整体优化，消除冗余代码和数据。
#lto = "fat" 这种配置下，编译器会在链接阶段对所有代码进行全局优化，通常能减少 20-30% 的体积。
#对于对体积有极端要求的场景，可以使用 "thin" 替代 "fat"，在优化效果和编译时间之间取得平衡。
lto = "fat"

# codegen-units = 1 表示单个代码生成单元，即每个 crate 都独立编译。
# 这种配置下，每个 crate 的编译速度会更快，但可能会牺牲一些整体优化效果。
# 如果希望获得更好的优化效果，可以将 codegen-units 设置为更大的值（如 256）。
codegen-units = 1

#去除调试符号是减小二进制体积最有效的方法之一。
#strip = true
strip = "symbols"

# 默认情况下，Rust 在 panic 时会进行栈展开，提供详细的调用栈信息。
# 但在生产环境中，特别是对于命令行工具和小型服务，立即终止程序可能是更合适的选择：
# 这种配置不仅减小了二进制体积（因为它不需要包含栈展开的代码），还能略微提升性能。
panic = "abort"

# CPU指令集优化 - 2025年最新设置
# 启用所有可用的CPU指令集优化
# 注意: target-cpu 和 target-feature 需要在编译时通过环境变量或.cargo/config.toml设置

# LTO 通过全局代码分析消除了未被使用的函数和数据；
# 调整优化级别使编译器优先选择空间效率更高的指令序列；
# 去除调试符号直接移除了大量的辅助信息；
# 改变 panic 策略避免了栈展开代码的引入；
# Musl 工具链则提供了一个更精简的标准库实现。
# 从编译流程角度看，这些优化发生在不同的阶段：
#  LTO 在链接阶段工作，优化级别影响编译中期决策，而去除符号和 panic 策略则影响前期的代码生成策略。
#  这种多阶段的优化组合确保了最终生成的二进制文件既小巧又高效。

[profile.dev]
opt-level = 0
debug = true
debug-assertions = true
overflow-checks = true
incremental = true
codegen-units = 256  # 并行编译优化

# 开发环境CPU优化 - 2025年最新设置
# 在开发环境中也启用CPU指令集优化以提升性能
# 注意: target-cpu 和 target-feature 需要在编译时通过环境变量或.cargo/config.toml设置

# 开发环境构建优化
[profile.dev.build-override]
opt-level = 1  # 构建依赖使用轻量级优化

[profile.test]
opt-level = 1
debug = true
# 测试环境CPU优化
# 注意: target-cpu 和 target-feature 需要在编译时通过环境变量或.cargo/config.toml设置

[profile.bench]
opt-level = 3
debug = false
lto = "fat"  # 基准测试使用最高优化
codegen-units = 1
# 基准测试CPU优化 - 最高性能设置
# 注意: target-cpu 和 target-feature 需要在编译时通过环境变量或.cargo/config.toml设置

# 基准测试构建优化
[profile.bench.build-override]
opt-level = 2

# 工作区级别的依赖版本统一 - 2025年10月最新稳定版本 (Rust 1.90 优化)
# 所有依赖库版本已与系统时间同步，确保使用最新的成熟稳定版本
# 最后更新: 2025年10月28日 - 依赖版本更新
# OpenTelemetry: v0.31.0 (当前最新稳定版本，v0.32.0需要Rust > 1.90)
# 2025-10-28更新:
#   - js-sys: v0.3.81 -> v0.3.82 (WebAssembly JS绑定更新)
#   - rustls-pki-types: v1.12.0 -> v1.13.0 (PKI类型更新)
#   - wasm-bindgen: v0.2.104 -> v0.2.105 (WebAssembly绑定更新)
#   - wasm-bindgen-futures: v0.4.54 -> v0.4.55 (异步绑定更新)
#   - wasm-bindgen-macro: v0.2.104 -> v0.2.105 (宏更新)
#   - wasm-bindgen-macro-support: v0.2.104 -> v0.2.105 (宏支持更新)
#   - wasm-bindgen-shared: v0.2.104 -> v0.2.105 (共享组件更新)
#   - web-sys: v0.3.81 -> v0.3.82 (Web API绑定更新)
# 2025-10-27更新:
#   - proptest: v1.8.0 -> v1.9.0 (属性测试框架更新)
#   - 所有依赖已确认为最新稳定版本
# 2025-10-26更新:
#   - cc: v1.2.41 -> v1.2.43
#   - deranged: v0.5.4 -> v0.5.5
#   - flate2: v1.1.4 -> v1.1.5
#   - proc-macro2: v1.0.102 -> v1.0.103
# 2025-10-23更新:
#   - proc-macro2: v1.0.101 -> v1.0.102
#   - syn: v2.0.107 -> v2.0.108
#   - unicode-ident: v1.0.19 -> v1.0.20
[workspace.dependencies]

# ========== 网络和 HTTP 相关依赖 ==========
# 2025年10月20日最新稳定版本，支持Rust 1.90新特性
# reqwest: 高级HTTP客户端库，支持异步操作、TLS、压缩等特性
reqwest = { version = "0.12.24", features = ["json", "rustls-tls", "stream", "gzip", "brotli", "deflate"] }
# hyper: 底层HTTP库，提供高性能的HTTP/1.1和HTTP/2支持
hyper = { version = "1.7.0", features = ["full", "http2"] }
# hyper生态系统组件 - 最新稳定版本
hyper-util = "0.1.18"      # Hyper工具库，提供实用功能
hyper-rustls = "0.28.2"    # Hyper的RustLS TLS后端
hyper-tls = "0.6.1"        # Hyper的TLS支持
hyper-timeout = "0.6.2"    # Hyper超时支持
hyper-proxy = "0.11.2"     # Hyper代理支持
# HTTP/2协议支持
h2 = "0.5.2"               # HTTP/2协议实现
http = "1.3.2"             # HTTP类型和工具
http-body = "1.0.1"        # HTTP body trait
http-body-util = "0.1.4"   # HTTP body工具

# ========== 微服务架构核心组件 ==========
# 注意：这些是示例性的微服务组件，实际项目中按需启用
# microservice-core = "0.3.0"    # 微服务核心框架（可选）
# service-mesh = "0.2.0"         # 服务网格抽象层（可选）
# distributed-tracing = "0.4.0"  # 分布式追踪增强（可选）

# ========== Web 框架 ==========
# 2025年10月最新稳定版本，支持Rust 1.90性能优化
# Axum: 基于Tokio的现代Web框架
axum = { version = "0.8.7", features = ["macros", "multipart", "tracing"] }
axum-core = "0.6.2"            # Axum核心组件
# Tower: 服务抽象层，提供中间件支持
tower = "0.5.3"                 # 服务抽象和中间件框架
tower-http = { version = "0.6.7", features = ["cors", "trace", "timeout", "compression-gzip"] }  # HTTP中间件
# Actix: 高性能Actor框架
actix-web = "4.11.1"            # Actix Web框架
actix = "0.13.6"                # Actix Actor系统
actix-rt = "2.11.1"             # Actix运行时

# ========== 用户界面库 ==========
# 终端UI库 - 跨平台终端操作
crossterm = "0.29.1"            # 跨平台终端库，支持Windows、Linux、macOS

# ========== 现代前端框架 ==========
# 2025年10月最新前端框架 - 跨平台UI (Rust 1.90优化)
# Dioxus: React-like的Rust前端框架
dioxus = "0.6.4"                # 核心框架
dioxus-web = "0.6.4"            # Web平台支持
dioxus-desktop = "0.6.4"        # 桌面应用支持，已解决GTK3安全漏洞
# Leptos: 高性能Web框架
leptos = "0.6.16"               # 核心框架
leptos_axum = "0.6.16"          # Axum集成
leptos_meta = "0.6.16"          # 元数据管理
leptos_router = "0.6.16"        # 路由系统

# ========== 桌面应用框架 ==========
# 2025年10月最新桌面应用框架 (Tauri 2.0 + Rust 1.90)
# Tauri: 使用Web技术构建原生桌面应用
tauri = "2.8.6"                 # 核心框架
tauri-build = "2.4.2"           # 构建工具
tauri-plugin-store = "2.4.1"    # 数据存储插件
tauri-plugin-log = "2.7.1"     # 日志插件

# ========== 异步生态核心依赖 ==========
# 其他异步生态常用依赖（统一版本，支持Rust 1.90）
async-trait = "0.1.89"          # 异步trait支持
async-stream = "0.3.7"          # 异步流处理
# async-std 已移除，使用 tokio 替代 (async-std 已弃用)
tokio-console = "0.1.14"        # Tokio控制台工具
tokio-test = "0.4.4"            # Tokio测试工具
mio = "1.1.0"                   # 底层I/O多路复用 (更新: 2025-10-17)
tungstenite = "0.28"            # WebSocket实现
rcgen = "0.14.6"                # 证书生成器

# ========== 基础工具依赖 ==========
# 基础依赖统一，提供常用功能支持
dotenvy = "0.15.8"              # 环境变量管理
tempfile = "3.23.0"             # 临时文件处理
# 系统调用和底层接口
libc = "0.2.177"                # 系统调用接口
socket2 = "0.6.1"               # 套接字抽象

# ========== gRPC 生态系统 ==========
# gRPC 相关 - 2025年10月最新稳定版本，高性能RPC框架
tonic = { version = "0.14.2", features = ["transport", "tls-ring", "tls-webpki-roots", "channel"] }  # gRPC客户端/服务器
tonic-build = "0.14.2"          # gRPC构建工具
# Prost: Protocol Buffers实现
prost = "0.14.1"                # 核心库
prost-build = "0.14.1"          # 构建工具
prost-derive = "0.15.2"         # 派生宏
prost-types = "0.14.1"          # 类型定义

# ========== 安全更新 ==========
# 安全更新 - 修复protobuf安全漏洞 (RUSTSEC-2024-0437)
# 通过工作区依赖强制使用安全版本
protobuf = "3.7.3"              # 修复递归崩溃漏洞，确保系统安全

# ========== TLS 和加密 ==========
# TLS 和加密 - 2025年10月17日最新稳定版本，确保通信安全
# RustLS: 纯Rust实现的TLS库
rustls = { version = "0.23.33", features = ["ring"] }  # TLS实现 (已是最新)
rustls-webpki = "0.104.2"       # Web PKI支持
rustls-pemfile = "2.2.1"        # PEM文件解析
tokio-rustls = "0.26.5"         # Tokio集成
rustls-native-certs = "0.8.2"   # 原生证书支持
# 加密库
ring = "0.17.15"                # 加密原语库
webpki-roots = "1.1.2"          # Web PKI根证书

# ========== 错误处理 ==========
# 错误处理 - 2025年10月最新稳定版本，提供完善的错误处理机制
thiserror = "2.0.17"            # 派生错误类型（主版本2.x）
anyhow = "1.0.100"              # 通用错误处理

# ========== 序列化框架 ==========
# 序列化 - 2025年10月最新稳定版本，支持多种数据格式
serde = { version = "1.0.228", features = ["derive"] }  # 序列化框架
serde_json = "1.0.145"          # JSON支持
serde_yaml = "0.9.34"           # YAML支持
bincode = "2.0.1"               # 二进制序列化

# ========== 异步运行时 ==========
# 异步运行时 - 2025年10月16日最新稳定版本，高性能异步编程
# Tokio: 异步运行时和工具
tokio = { version = "1.48.0", features = ["full"] }     # 异步运行时
tokio-util = "0.7.16"           # 工具库
tokio-stream = "0.1.17"         # 异步流
# Futures: 异步编程基础
tokio-tungstenite = "0.27.0"    # WebSocket支持
futures = "0.3.31"              # 异步原语
futures-util = "0.3.31"         # 实用工具

# ========== 日志和追踪 ==========
# 日志和追踪 - 2025年10月最新稳定版本，可观测性核心组件
# Tracing: 结构化日志和追踪
tracing = "0.1.41"              # 核心追踪库
tracing-subscriber = { version = "0.3.20", features = ["env-filter", "json"] }  # 订阅者
log = "0.4.28"                  # 标准日志库
env_logger = "0.11.8"           # 环境变量日志配置
# OpenTelemetry: 可观测性标准（统一使用 v0.31.0 - 最新稳定版本 2025年10月23日）
tracing-opentelemetry = "0.31"  # 追踪集成
opentelemetry = "0.31.0"        # 核心API
opentelemetry_sdk = { version = "0.31.0", features = ["rt-tokio"] }  # SDK实现
opentelemetry-otlp = { version = "0.31.0", features = ["http-json"] }  # OTLP协议
opentelemetry-stdout = "0.31.0" # 标准输出导出器
opentelemetry-proto = { version = "0.31.0", features = ["gen-tonic"] }  # 协议缓冲区
opentelemetry-http = "0.31.0"   # HTTP支持

# ========== 指标监控 ==========
# 指标 - 2025年10月最新稳定版本，系统监控和指标收集
metrics = "0.24.2"              # 指标收集库
metrics-exporter-prometheus = "0.17.2"  # Prometheus导出器

# ========== 时间处理 ==========
# 时间处理 - 2025年10月最新稳定版本，与系统时间同步
chrono = { version = "0.4.42", features = ["serde"] }   # 日期时间库
time = { version = "0.3.44", features = ["serde", "macros"] }  # 现代时间库，支持Rust 1.90

# ========== 常用工具库 ==========
# 其他常用库 - 2025年10月20日最新稳定版本，提供基础功能支持
# 标识符和URL
uuid = { version = "1.18.1", features = ["v4", "serde"] }  # UUID生成
url = "2.5.7"                  # URL解析
# 数据处理
bytes = "1.10.1"               # 字节操作
indexmap = "2.12.0"            # 有序哈希映射
base64 = "0.22.1"              # Base64编码（统一版本）
# 系统信息
once_cell = "1.21.3"           # 单次初始化单元格
num_cpus = "1.17.0"            # CPU核心数检测
# 加密和随机数
rand = "0.9.2"                 # 随机数生成
sha2 = "0.10.9"                # SHA-2哈希
hex = "0.4.3"                  # 十六进制编码
# 正则表达式
regex = "1.12.2"               # 正则表达式
regex-syntax = "0.8.8"         # 正则表达式语法
regex-automata = "0.4.13"      # 正则表达式自动机
# 集合和迭代
itertools = "0.14.0"           # 迭代器工具（统一到最新版本）

# ========== 数据库和存储 ==========
# 数据库和存储 - 2025年10月最新稳定版本，支持多种数据库
# ORM和数据库驱动
sea-orm = { version = "1.1.16", features = ["sqlx-postgres", "runtime-tokio-rustls"], default-features = false }  # 现代ORM
sqlx = { version = "0.8.7", features = ["runtime-tokio-rustls", "postgres", "mysql", "sqlite", "chrono", "uuid"], default-features = false }  # 异步SQL工具包
redis = "0.32.7"               # Redis客户端
rusqlite = { version = "0.37.0", default-features = false }  # SQLite绑定

# ========== 性能测试和基准测试 ==========
# 性能测试和基准测试 - 2025年10月最新稳定版本
criterion = "0.7.0"            # 基准测试框架

# ========== 配置管理 ==========
# 配置管理 - 2025年10月16日最新稳定版本
config = "0.15.18"             # 配置管理库
toml = "0.9.8"                 # TOML格式支持
# 环境变量和配置
getrandom = "0.3.4"            # 随机数生成

# ========== 并发和同步 ==========
# 并发和同步 - 2025年10月最新稳定版本，高性能并发编程
crossbeam = "0.8.4"            # 无锁数据结构
rayon = "1.11.1"               # 数据并行处理
dashmap = "6.1.0"              # 并发哈希映射
parking_lot = "0.12.5"         # 高性能同步原语

# ========== 测试框架 ==========
# 测试相关 - 2025年10月最新稳定版本
mockall = "0.13.1"             # 模拟对象生成
proptest = "1.9.0"             # 属性测试框架 (更新: 2025-10-27)

# ========== AI 和机器学习 ==========
# AI 和机器学习 - 2025年10月最新稳定版本，支持现代ML/AI应用
# Candle: 纯Rust ML框架
candle-core = "0.9.2"          # 核心组件
candle-nn = "0.9.2"            # 神经网络
candle-transformers = "0.9.2"  # Transformer模型
# PyTorch绑定
tch = "0.17.1"                 # PyTorch Rust绑定
# 图算法
petgraph = "0.8.4"             # 图数据结构

# ========== Web 和 GUI 框架 ==========
# Web 和 GUI 框架 - 2025年10月最新稳定版本
# tauri 已移除，使用 egui/iced 替代 (解决 GTK3 安全漏洞)
egui = "0.32.4"                # 即时模式GUI框架
iced = "0.13.2"                 # 响应式GUI框架

# ========== 深度学习框架 ==========
# 2025年最新深度学习框架
# burn = "0.10.0"  # 暂时禁用，存在版本兼容性问题
# burn-ndarray = "0.10.0"  # 暂时禁用，存在版本兼容性问题
# burn-tch 暂时禁用，与现有tch版本冲突

# ========== 高性能异步运行时 ==========
# 2025年10月最新高性能异步运行时 (Rust 1.90优化)
glommio = "0.8.0"              # 线程每核心异步运行时
tokio-console-api = "0.2.0"    # Tokio控制台API
tokio-metrics = "0.3.1"        # Tokio指标收集
tokio-uring = "0.10.0"         # io_uring支持

# ========== 微服务框架和组件 ==========
# 2025年10月微服务组件（可选 - 按需启用）
# jaeger-client = "0.21.0"       # 分布式追踪 - Jaeger（使用OpenTelemetry替代）
# zipkin = "0.11.0"              # 分布式追踪 - Zipkin（使用OpenTelemetry替代）
# grafana-dashboard = "0.1.0"    # 监控面板（按需启用）

# ========== 安全漏洞修复 ==========
# 安全漏洞修复 - 2025年10月
# 替换未维护和有安全漏洞的依赖
ahash = "0.8.12"               # 替代 fxhash (未维护) - 高性能哈希
quote = "1.0.41"               # 替代 paste (未维护) - 代码生成
proc-macro-error2 = "2.0.1"    # 替代 proc-macro-error (未维护) - 宏错误处理
is-terminal = "0.2.0"          # 替代 atty (有安全漏洞) - 终端检测
wasm-bindgen = "0.2.105"       # 最新稳定版本，支持WebAssembly 2.0
nix = "0.28.0"                 # 系统调用安全封装
# pingora 已移除，存在安全漏洞 (RUSTSEC-2025-0037, RUSTSEC-2025-0070)

# ========== 安全更新说明 ==========
# 2025年10月安全更新 - 修复已知安全漏洞
# 使用标准库替代未维护的instant
# instant 已移除，使用 std::time::Instant 替代
# paste 已移除，使用 quote 宏替代
# proc-macro-error 已移除，使用 proc-macro-error2 替代

# ========== 版本冲突修复 ==========
# 版本冲突修复 - 通过工作区依赖统一版本
# 注意: 使用 [patch.crates-io] 可能导致编译错误
# 改为通过 [workspace.dependencies] 统一管理版本

# ========== 版本管理策略 ==========
# 依赖版本约束 - 在工作区依赖中统一版本 end

# ========== 特性标志配置 ==========
# 工作区特性标志配置 - 优化编译时间和依赖管理
# 注意: 工作区依赖不能设为可选，特性标志在各crate中配置

# ========== 安全补丁策略 ==========
# 安全补丁 - 强制使用安全版本的依赖
# 注意：通过工作区依赖统一管理版本，避免使用patch

# ========== Rust 1.90特性支持 ==========
# 2025年最新Rust 1.90特性支持依赖 (已在上面定义，避免重复)

# ========== 云原生和微服务生态集成 ==========
# 注意：以下是示例性依赖，实际使用时请根据需求选择性启用
# 这些依赖可能不是所有项目都需要，且部分可能不在 crates.io 或已弃用

# Service Mesh支持（可选 - 按需启用）
# istio-client = "0.2.0"         # Istio服务网格
# linkerd2-proxy = "0.2.0"       # Linkerd2代理
# envoy-proxy = "0.2.0"          # Envoy代理
consul = "0.4.2"               # 服务发现和配置（实际可用）
# etcd-rs = "0.14.0"             # 分布式键值存储

# 云原生技术栈（可选 - 按需启用）
# kubernetes-client = "0.21.0"   # Kubernetes客户端
# docker-api = "0.14.0"          # Docker API
# helm = "0.2.0"                 # Helm包管理
# argo-cd = "0.2.0"              # ArgoCD GitOps
# kustomize = "0.1.0"            # Kustomize配置管理

# 监控和可观测性增强（已有 OpenTelemetry，以下为可选）
# datadog-agent = "0.2.0"        # Datadog代理
# newrelic = "0.2.2"             # New Relic集成
# splunk-hec = "0.2.0"           # Splunk HEC
# elastic-apm = "0.2.0"          # Elastic APM
# grafana-agent = "0.3.0"        # Grafana Agent
prometheus = "0.14.0"          # Prometheus指标收集（实际可用）

# 安全框架（可选 - 按需启用）
# vault-client = "0.2.0"         # HashiCorp Vault
oauth2 = "4.4.2"               # OAuth2认证（实际可用）
jwt = "0.16.0"                 # JWT令牌（实际可用）
# rbac = "0.2.0"                 # 基于角色的访问控制
# mTLS = "0.1.0"                 # 双向TLS认证
# secrets-manager = "0.1.0"      # 密钥管理

# 微服务组件（可选 - 按需启用）
# async-service-discovery = "0.3.0"  # 异步服务发现
# circuit-breaker = "0.4.0"          # 熔断器模式
# load-balancer = "0.3.4"            # 负载均衡器
# rate-limiter = "0.3.0"             # 限流器
# distributed-cache = "0.2.0"        # 分布式缓存
# event-sourcing = "0.2.0"           # 事件溯源
# cqrs = "0.2.1"                     # CQRS模式
