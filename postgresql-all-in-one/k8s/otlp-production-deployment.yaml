# OTLP Rust 生产环境 Kubernetes 部署配置
# 本文件提供了生产环境的完整部署配置，包括高可用性、监控、安全等

apiVersion: v1
kind: Namespace
metadata:
  name: otlp-production
  labels:
    name: otlp-production
    environment: production
    app: otlp-rust

---
# ConfigMap for OTLP configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: otlp-config
  namespace: otlp-production
data:
  # OTLP Server Configuration
  OTLP_ENDPOINT: "0.0.0.0:4317"
  OTLP_HTTP_ENDPOINT: "0.0.0.0:4318"
  OTLP_GRPC_ENDPOINT: "0.0.0.0:4317"
  
  # Performance Configuration
  MAX_CONCURRENT_REQUESTS: "1000"
  BATCH_SIZE: "512"
  EXPORT_TIMEOUT: "30s"
  MAX_QUEUE_SIZE: "2048"
  
  # Security Configuration
  ENABLE_TLS: "true"
  TLS_CERT_PATH: "/etc/ssl/certs/otlp.crt"
  TLS_KEY_PATH: "/etc/ssl/private/otlp.key"
  ENABLE_AUTH: "true"
  JWT_SECRET: "production-jwt-secret-key"
  
  # Monitoring Configuration
  ENABLE_METRICS: "true"
  METRICS_PORT: "9090"
  ENABLE_TRACING: "true"
  TRACING_SAMPLE_RATE: "0.1"
  
  # Enterprise Features
  ENABLE_MULTI_TENANT: "true"
  ENABLE_DATA_GOVERNANCE: "true"
  ENABLE_COMPLIANCE: "true"
  ENABLE_HIGH_AVAILABILITY: "true"
  
  # Logging Configuration
  LOG_LEVEL: "info"
  LOG_FORMAT: "json"
  ENABLE_STRUCTURED_LOGGING: "true"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: otlp-secrets
  namespace: otlp-production
type: Opaque
data:
  # Base64 encoded secrets
  jwt-secret: cHJvZHVjdGlvbi1qd3Qtc2VjcmV0LWtleQ==
  encryption-key: cHJvZHVjdGlvbi1lbmNyeXB0aW9uLWtleQ==
  database-password: cHJvZHVjdGlvbi1kYi1wYXNzd29yZA==

---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: otlp-service-account
  namespace: otlp-production
  labels:
    app: otlp-rust
    environment: production

---
# ClusterRole for OTLP service
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: otlp-cluster-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]

---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: otlp-cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: otlp-cluster-role
subjects:
- kind: ServiceAccount
  name: otlp-service-account
  namespace: otlp-production

---
# PersistentVolumeClaim for data storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: otlp-data-pvc
  namespace: otlp-production
  labels:
    app: otlp-rust
    environment: production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd

---
# OTLP Server Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otlp-server
  namespace: otlp-production
  labels:
    app: otlp-rust
    component: server
    environment: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: otlp-rust
      component: server
  template:
    metadata:
      labels:
        app: otlp-rust
        component: server
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: otlp-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: otlp-server
        image: otlp-rust:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 4317
          name: grpc
          protocol: TCP
        - containerPort: 4318
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: RUST_LOG
          value: "info"
        - name: RUST_BACKTRACE
          value: "1"
        envFrom:
        - configMapRef:
            name: otlp-config
        - secretRef:
            name: otlp-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 9090
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: data-volume
          mountPath: /app/data
        - name: ssl-certs
          mountPath: /etc/ssl/certs
          readOnly: true
        - name: ssl-keys
          mountPath: /etc/ssl/private
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: otlp-data-pvc
      - name: ssl-certs
        secret:
          secretName: otlp-tls-certs
      - name: ssl-keys
        secret:
          secretName: otlp-tls-keys
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - otlp-rust
              topologyKey: kubernetes.io/hostname

---
# OTLP Server Service
apiVersion: v1
kind: Service
metadata:
  name: otlp-server-service
  namespace: otlp-production
  labels:
    app: otlp-rust
    component: server
    environment: production
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 4317
    targetPort: 4317
    protocol: TCP
    name: grpc
  - port: 4318
    targetPort: 4318
    protocol: TCP
    name: http
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: otlp-rust
    component: server

---
# HorizontalPodAutoscaler for auto-scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: otlp-server-hpa
  namespace: otlp-production
  labels:
    app: otlp-rust
    component: server
    environment: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: otlp-server
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# PodDisruptionBudget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: otlp-server-pdb
  namespace: otlp-production
  labels:
    app: otlp-rust
    component: server
    environment: production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: otlp-rust
      component: server

---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: otlp-network-policy
  namespace: otlp-production
  labels:
    app: otlp-rust
    environment: production
spec:
  podSelector:
    matchLabels:
      app: otlp-rust
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 4317
    - protocol: TCP
      port: 4318
    - protocol: TCP
      port: 9090
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: otlp-ingress
  namespace: otlp-production
  labels:
    app: otlp-rust
    environment: production
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
    nginx.ingress.kubernetes.io/grpc-backend: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - otlp.example.com
    secretName: otlp-tls-secret
  rules:
  - host: otlp.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: otlp-server-service
            port:
              number: 4317

---
# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: otlp-server-monitor
  namespace: otlp-production
  labels:
    app: otlp-rust
    environment: production
spec:
  selector:
    matchLabels:
      app: otlp-rust
      component: server
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s

---
# PrometheusRule for alerting
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: otlp-alerts
  namespace: otlp-production
  labels:
    app: otlp-rust
    environment: production
spec:
  groups:
  - name: otlp.rules
    rules:
    - alert: OTLPServerDown
      expr: up{job="otlp-server"} == 0
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "OTLP Server is down"
        description: "OTLP Server has been down for more than 1 minute"
    
    - alert: OTLPHighErrorRate
      expr: rate(otlp_requests_total{status="error"}[5m]) / rate(otlp_requests_total[5m]) > 0.05
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "OTLP Server high error rate"
        description: "OTLP Server error rate is above 5% for more than 2 minutes"
    
    - alert: OTLPHighLatency
      expr: histogram_quantile(0.95, rate(otlp_request_duration_seconds_bucket[5m])) > 1
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "OTLP Server high latency"
        description: "OTLP Server 95th percentile latency is above 1 second"
    
    - alert: OTLPHighMemoryUsage
      expr: (container_memory_usage_bytes{pod=~"otlp-server-.*"} / container_spec_memory_limit_bytes) > 0.8
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "OTLP Server high memory usage"
        description: "OTLP Server memory usage is above 80%"
    
    - alert: OTLPHighCPUUsage
      expr: (rate(container_cpu_usage_seconds_total{pod=~"otlp-server-.*"}[5m]) / container_spec_cpu_quota) > 0.8
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "OTLP Server high CPU usage"
        description: "OTLP Server CPU usage is above 80%"
